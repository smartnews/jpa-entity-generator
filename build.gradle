plugins {
    id 'java'
    id 'idea'
    id 'com.dorongold.task-tree' version '1.5'
    id 'maven-publish'
    id 'signing'
    id 'java-library'
}

def isLocalDeployment = project.hasProperty("local")

java {
    sourceCompatibility = '1.8'
}

repositories {
    mavenCentral()
}

configurations {
    all*.exclude module: 'spring-boot-starter-logging'
}

dependencies {
    def lombokVersion = '1.18.2'
    def jakartaAnnotationApiVersion = '2.1.1'

    implementation 'com.google.guava:guava:26.0-jre'
    implementation 'org.apache.commons:commons-lang3:3.8.1'
    implementation 'org.freemarker:freemarker:2.3.28'
    implementation 'org.yaml:snakeyaml:1.23'
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation "org.projectlombok:lombok:${lombokVersion}"

    compileOnly "jakarta.annotation:jakarta.annotation-api:${jakartaAnnotationApiVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    compileOnly gradleApi()
    compileOnly 'org.apache.maven:maven-plugin-api:3.5.4'

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testCompileOnly "jakarta.annotation:jakarta.annotation-api:${jakartaAnnotationApiVersion}"

    testImplementation 'junit:junit:4.12'
    testImplementation 'com.h2database:h2:1.4.197'
    testImplementation 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'
    testImplementation 'jakarta.persistence:jakarta.persistence-api:3.0.0'
    testImplementation "org.projectlombok:lombok:${lombokVersion}"

    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

test {
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        showStandardStreams = true
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }

        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            if (isLocalDeployment) {
                url = uri("file://${System.getProperty('user.home')}/.m2/repository")
            } else {
                url = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
                credentials {
                    // It's most likely that you would store these in gradle.properties
                    // and reference them here with `project.property(...)`
                    username = project.findProperty("SONATYPE_NEXUS_USER") ?: System.getenv("SONATYPE_NEXUS_USER")
                    password = project.findProperty("SONATYPE_NEXUS_PASS") ?: System.getenv("SONATYPE_NEXUS_PASS")
                }
            }
        }
    }
}