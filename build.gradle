plugins {
    id 'java'
    id 'idea'
    id 'maven'
    id 'signing'
    id 'com.dorongold.task-tree' version '1.3'
}

def isLocalDeployment = project.hasProperty("local")

compileJava {
    sourceCompatibility = '1.8'
}
repositories {
    mavenCentral()
}
configurations {
    all*.exclude module : 'spring-boot-starter-logging'
    providedCompile
}
sourceSets.main.compileClasspath += configurations.providedCompile
sourceSets.test.compileClasspath += configurations.providedCompile
sourceSets.test.runtimeClasspath += configurations.providedCompile

dependencies {
    compile 'com.google.guava:guava:26.0-jre'
    compile 'org.apache.commons:commons-lang3:3.8.1'
    compile 'org.freemarker:freemarker:2.3.28'
    compile 'org.yaml:snakeyaml:1.23'
    compile 'org.slf4j:slf4j-api:1.7.25'

    compileOnly 'org.projectlombok:lombok:1.18.2'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    providedCompile gradleApi()
    providedCompile 'org.apache.maven:maven-plugin-api:3.5.4'

    testCompile 'junit:junit:4.12'
    testCompile 'com.h2database:h2:1.4.197'
    testCompile 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'

    testCompileOnly 'org.projectlombok:lombok:1.18.2'
    testCompileOnly 'com.google.code.findbugs:jsr305:3.0.2'
}

sourceSets {
    main {
        java {
            exclude 'com/smartnews/jpa_entity_generator/maven/**'
        }
    }
}

test {
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        testLogging.showStandardStreams = true
    }
}
allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

    // http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
artifacts {
    archives javadocJar, sourcesJar
}

if (!isLocalDeployment) {
    signing {
        sign configurations.archives
    }
}

try {
uploadArchives {
    repositories {
        mavenDeployer {
            pom.groupId = 'com.smartnews'
            pom.artifactId = 'jpa-entity-generator'
            pom.version = '0.99.9-HPS'

            if (isLocalDeployment) {
                def localRepoPath = 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
                repository(url: localRepoPath)
                snapshotRepository(url: localRepoPath)
            } else {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: "$System.env.SONATYPE_NEXUS_USER", password: "$System.env.SONATYPE_NEXUS_PASS")
                }
                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: "$System.env.SONATYPE_NEXUS_USER", password: "$System.env.SONATYPE_NEXUS_PASS")
                }
            }

            pom.project {
                name 'JPA Entity Generator'
                description 'Lombok-wired JPA entity source code generator, Gradle and Maven supported.'
                packaging 'jar'
                url 'https://github.com/smartnews/jpa-entity-generator'

                scm {
                    connection 'git@github.com:smartnews/jpa-entity-generator.git'
                    developerConnection 'git@github.com:smartnews/jpa-entity-generator.git'
                    url 'https://github.com/smartnews/jpa-entity-generator'
                }

                licenses {
                    license {
                        name 'The MIT License'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id 'seratch'
                        name 'Kazuhiro Sera'
                        email 'seratch@gmail.com'
                    }
                }
            }
        }
    }
}
} catch (MissingPropertyException e) { e.printStackTrace() }
