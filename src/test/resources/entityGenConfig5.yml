# ---------------------------------------------------------
# *** JDBC configuration to fetch metadata ***

jdbcSettings:
  url: "jdbc:h2:file:./sample/db/blog;MODE=MySQL;TRACE_LEVEL_FILE=2;TRACE_LEVEL_SYSTEM_OUT=2"
  username: "user"
  password: ${DB_PASSWORD}
  driverClassName: "org.h2.Driver"

# ---------------------------------------------------------
# *** Basic/global configuration ***

# If you need to specify non-standard source directory, set the following setting as needed
#   - string value: the relative path from the project root directory.
outputDirectory: "src/main/java"

# The package name used when generating entity classes
#   - string value: full package name
packageName: "com.example.entity5"

# If you need to generate JPA 1 compatible entity classes as well, set the following attributes
#   - boolean value: true if you need to generate JPA 1 compatible entities as well
jpa1SupportRequired: true
# The package to put JP 1 compatible entity classes.
#   - string value: full package name separate from the "packageName"
packageNameForJpa1: "com.example.entity5.jpa1"

# If you'd like to have JSR-305 annotations in entity classes as well, set the following attribute
#   - boolean value: true if you need to generate Nonnull/Nullable annotation-wired entities as well
jsr305AnnotationsRequired: false

# If you want use primitive type instead of the boxing type(e.g: int <-> Integer), set the following attribute
# This will only take effect on non null fields
#   - boolean value: true if you want to use primitive type for non null fields
usePrimitiveForNonNullField: false

generateRelationships: true

# ---------------------------------------------------------
# *** Table scan mode ***

# Set the scan mode (possible values: All / RuleBased)
#   - string value: 'All' (default) or 'RuleBased'
tableScanMode: 'All'

# If the "tableScanMode" is "RuleBased", the table scanner considers these rules
#   - array of TableScanRule objects
#     - tableName (string) / tableNames (array): string value that partially matches table names (case sensitive)
#tableScanRules:
#  - tableNames: ["foo_.*"]

# ---------------------------------------------------------
# *** Rules for exclusion ***

# Define the following rules if you'd like to exclude specific tables when generating entity classes
#   - array of TableExclusionRule objects
#     - tableName (string) / tableNames (array): string value that partially matches table names (case sensitive)
tableExclusionRules:
  - tableName: [".*_tmp"]
  - tableNames: [".*_tmp2"]

# ---------------------------------------------------------
# *** Rules for table/class name conversion ***

# If you need some rules that convert table names to entity class names, list the mapping rules as below.
#   - array of ClassNameRule objects
#     - tableName: table name (full name, case sensitive)
#     - className: Java class name to be used (you cannot include package name in front of the class name)
classNameRules:
  - tableName: "article"
    className: "BlogArticle"
  - tableName: "article_tag"
    className: "BlogArticleTag"
  - tableName: "abtest"
    className: "ABTest"

# ---------------------------------------------------------
# *** Java interfaces to let generated classes implement ***
#   - array of InterfaceRule objects
#     - (optional) className (string) / classNames (array): target Java class names (case sensitive)
#     - interfaces: array of Interface objects
#       - name: FQDN of the interface
#       - (optional) genericsClassNames: array of string values if the interface has generics
interfaceRules:
  # If you just specify the interfaces, all the generated classes'll implement the interfaces.
  - interfaces: [{name: "java.io.Serializable"}]

  - classNames: ["ABTest"]
    interfaces: [{name: "com.example.util.ExpirationPredicate"}]

# ---------------------------------------------------------
# *** Rules on how to attach class annotations ***
#   - array of ClassAnnotationRule objects
#     - (optional) className (string) / classNames (array): target Java class names (case sensitive)
#     - annotations: array of Annotation objects
#       - className: the annotation class name
#       - (optional) attributes (array of AnnotationAttribute objects): attributes if exist
#         - name (string): the name of the attribute
#         - (optional) value (string): the value of the attribute
#         or
#         - code (string): writing code in a string value instead of specifying name + value
#       or
#       - code (string): write the whole code in a string value instead of specifying className + attributes
classAnnotationRules:
  # If you just specify the annotations, all the generated classes'll have them.
  - annotations:
    - className: "lombok.ToString"

  # You can specify the classes to have the class annotations.
  - {classNames: ["ABTest",], annotations: [className: "Deprecated"]}
  - className: "Blog"
    annotations:
      - className: "lombok.Builder"
        attributes:
          - name: "toBuilder"
            value: "true"

# ---------------------------------------------------------
# *** Rules on how to append class comments ***
#   - array of ClassAdditionalCommentRule objects
#     - (optional) className (string) / classNames (array): target Java class names (case sensitive)
#     - comment (string): comment value to be appended to the class definition
classAdditionalCommentRules:
  # If you just specify the classNames, all the generated classes'll have them.
  - comment: "Note: auto-generated by jpa-entity-generator"

  - classNames: [
      "ABTest",
    ]
    comment: "TODO: This A/B testing mechanism is no longer used"

# ---------------------------------------------------------
# *** Rules to convert types of the fields in generated classes ***
#   - array of FieldTypeRule objects
#     - (optional) className (string) / classNames (array): target Java class names (case sensitive)
#     - fieldName (string) / fieldNames (array): the field name to convert its type
#     - typeName (string): the type name to be converted
fieldTypeRules:
  - {classNames: ["ABTest"], fieldName: "config", typeName: "String"}

  # If you don't specify classNames in a rule, all the generated classes will be affected.
  - {                        fieldName: "active", typeName: "boolean"}

# ---------------------------------------------------------
# *** Rules on how to attach field annotations ***
#   - array of FieldAnnotationRule objects
#     - (optional) className (string) / classNames (array): target Java class names (case sensitive)
#     - fieldName (string) / fieldNames (array): the field name to attach annotations
#     - annotations: array of Annotation objects
#       - className: the annotation class name
#       - (optional) attributes (array of AnnotationAttribute objects): attributes if exist
#         - name (string): the name of the attribute
#         - (optional) value (string): the value of the attribute
#         or
#         - code (string): writing code in a string value instead of specifying name + value
#       or
#       - code (string): write the whole code in a string value instead of specifying className + attributes
fieldAnnotationRules:
  - className: "BlogArticle"
    fieldNames: ["tags"]
    annotations: [{className: "Deprecated"}]

  - classNames: ["ABTest"]
    fieldNames: ["config"]
    annotations: [{
      className: "com.example.annotation.Experimental",
      attributes: [{name: "comment", value: '"The expected data format is JSON"'}],
      # code: '@com.example.annotation.Experimental(comment = "The expected data format is JSON")',
    }]

# ---------------------------------------------------------
# *** Rules on how to append field comments ***
#   - array of FieldAdditionalCommentRule objects
#     - (optional) className (string) / classNames (array): target Java class names (case sensitive)
#     - fieldName (string) / fieldNames (array): the field name to attach annotations
#     - comment (string): comment value to be appended to the field definition
fieldAdditionalCommentRules:
  - {className: "ABTest",         fieldName: "active",                comment: "true if the AB test is still active."}
  - {className: "BlogArticleTag", fieldNames: ["articleId", "tagId"], comment: "The field is non-null value"}

# ---------------------------------------------------------
# *** Rules on how to set default values to the fields ***
#   - array of FieldDefaultValueRule objects
#     - (optional) className (string) / classNames (array): target Java class names (case sensitive)
#     - fieldName (string) / fieldNames (array): the field name to attach annotations
#     - defaultValue (string): the default value part in source code (specify '"something"' if you have a string value)
fieldDefaultValueRules:
  # If you don't specify classNames in a rule, all the generated classes will be affected.
#  - {                        fieldNames: ["name"],   defaultValue: '"Anonymous"'}
  - {classNames: ["ABTest"], fieldNames: ["active"], defaultValue: "0"}

# ---------------------------------------------------------
# *** Rules to append additional code to generated classes ***
#   - array of AdditionalCodeRule objects
#     - (optional) className (string) / classNames (array): target Java class names (case sensitive)
#     - code (string): writing code in a string value
#     - (optional) position (string): "Top" or "Bottom" (default: "Bottom")
#     - (optional) jpa1Code (string): writing code in a string value if you need to overwrite code only for JPA 1 compatible entities
additionalCodeRules:
  - classNames: ["BlogArticle", "BlogArticleTag"]
    position: "Top"
    code: |
            public Integer getId() { return this.id; }

